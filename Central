churn_output_std = churn_output[['dealer_code', 'churn_risk_score', 'notification']].copy()
churn_output_std['score'] = churn_output_std['churn_risk_score']
churn_output_std['insight_type'] = 'Churn'
churn_output_std = churn_output_std[['dealer_code', 'insight_type', 'score', 'notification']]



od_output_std = od_output[['dealer_code', 'od_risk_score', 'notification']].copy()
od_output_std['score'] = od_output_std['od_risk_score']
od_output_std['insight_type'] = 'OD Risk'
od_output_std = od_output_std[['dealer_code', 'insight_type', 'score', 'notification']]



engagement_output_std = engagement_output[['dealer_code', 'product_category', 'drop_prob', 'notification']].copy()
engagement_output_std['score'] = engagement_output_std['drop_prob']
engagement_output_std['insight_type'] = 'Engagement Drop'
engagement_output_std = engagement_output_std[['dealer_code', 'insight_type', 'product_category', 'score', 'notification']]


adv_push_std = adv_push_output[['dealer_code', 'target_push_potential']].copy()
adv_push_std['score'] = adv_push_std['target_push_potential'] * 1.0
adv_push_std['notification'] = adv_push_std['dealer_code'].apply(
    lambda x: f"Dealer {x} is a candidate for push based on advanced product uptake.")
adv_push_std['insight_type'] = 'Advanced Push Potential'
adv_push_std = adv_push_std[['dealer_code', 'insight_type', 'score', 'notification']]


adv_drop_std = adv_drop_output[adv_drop_output['drop_flag'] == 1].copy()
adv_drop_std['score'] = 1.0
adv_drop_std['notification'] = adv_drop_std['dealer_code'].apply(
    lambda x: f"Dealer {x} shows risk of disengaging from advanced product category.")
adv_drop_std['insight_type'] = 'Advanced Ratio Drop'
adv_drop_std = adv_drop_std[['dealer_code', 'insight_type', 'score', 'notification']]


def compute_drop_score(row):
    early = row['adv_early_slope']
    late = row['adv_late_slope']
    volume = row['volume_slope_last3']

    # Only compute if all drop conditions met
    if early >= 0 and late < 0 and volume >= 0:
        # Sharper drop = higher score
        drop_magnitude = early - late  # e.g. +10 to -20 = 30
        return min(1.0, max(0.3, drop_magnitude / 50))  # scale: 50-unit swing = full score
    else:
        return 0.0

adv_drop_std = adv_drop_df.copy()
adv_drop_std['score'] = adv_drop_std.apply(compute_drop_score, axis=1)
adv_drop_std['insight_type'] = 'Advanced Ratio Drop'
adv_drop_std['notification'] = adv_drop_std['dealer_code'].apply(
    lambda x: f"Dealer {x} shows declining adoption of advanced products despite stable sales."
)
adv_drop_std = adv_drop_std[['dealer_code', 'insight_type', 'score', 'notification']]

def compute_push_score(row):
    adv_slope = row['adv_ratio_slope']
    value_growth = row['value_growth_pct']
    volume_growth = row['volume_growth_pct']

    # Only compute score if target_push_potential is 1
    if row['target_push_potential'] != 1:
        return 0.0

    # Normalize slopes into 0.3â€“1.0
    slope_score = min(1.0, max(0.3, adv_slope / 100))  # cap at 100

    # Reward if value & volume growth > 0
    growth_bonus = 0
    if value_growth > 0:
        growth_bonus += 0.1
    if volume_growth > 0:
        growth_bonus += 0.1

    final_score = min(1.0, slope_score + growth_bonus)
    return final_score

adv_push_std = adv_push_df.copy()
adv_push_std['score'] = adv_push_std.apply(compute_push_score, axis=1)
adv_push_std['insight_type'] = 'Advanced Push Potential'
adv_push_std['notification'] = adv_push_std['dealer_code'].apply(
    lambda x: f"Dealer {x} is a candidate for push based on advanced product momentum."
)
adv_push_std = adv_push_std[['dealer_code', 'insight_type', 'score', 'notification']]

territory_map = pd.read_csv("territory_mapping.csv")  # Replace with actual path

dealer_insights = pd.concat([
    churn_output_std,    # ['dealer_code', 'insight_type', 'score', 'notification']
    od_output_std,
    adv_push_std,
    adv_drop_std
], ignore_index=True)

# Add territory
dealer_insights = dealer_insights.merge(territory_map, on='dealer_code', how='left')

# Confirm structure
print(dealer_insights.columns)
# Should have: ['dealer_code', 'insight_type', 'score', 'notification', 'territory']
