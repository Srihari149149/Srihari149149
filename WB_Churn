import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
import os
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# File paths
sales_file = r"C:\Users\P00993489\Downloads\GOmumbai.csv"
value_audit_file1 = r"C:\Users\P00993489\Downloads\Value_Audit.csv"
value_audit_file2 = r"C:\Users\P00993489\Downloads\Value_audit_2.csv"
od_data_path = r"C:\Users\P00993489\Downloads\OD_Data.xlsx"  # Path to OD data Excel workbook

# Define column names
sales_cols = ['Date', 'value', 'volume', 'territory', 'dealer code', 'category']  # Added category
audit_cols = ['Competitor__r.Name', 'Dealer__r.Account_Code__c', 'Dealer__r.Name', 'Value__c', 'Category__c']  # Added category

# Load and preprocess sales data
print("Loading sales data...")
sales_df = pd.read_csv(sales_file, usecols=sales_cols, encoding='latin1')
sales_df["date"] = pd.to_datetime(sales_df["Date"])
sales_df["month"] = sales_df["date"].dt.to_period("M").dt.to_timestamp()
sales_df["year"] = sales_df["date"].dt.year
sales_df["month_num"] = sales_df["date"].dt.month
sales_df['month_ordinal'] = sales_df['month'].map(lambda x: x.toordinal())

# Standardize dealer codes
sales_df['dealer_code'] = sales_df['dealer code'].astype(str).str[-6:]
sales_df = sales_df[~sales_df['dealer_code'].str.startswith('INB', na=False)]

print("Sales data shape:", sales_df.shape)


 Load and preprocess competitor data (Value Audit)
print("Loading competitor data...")
value_audit_df1 = pd.read_csv(value_audit_file1, usecols=audit_cols)
value_audit_df2 = pd.read_csv(value_audit_file2, usecols=audit_cols)

# Filter out 'APL' competitors and standardize dealer codes
value_audit_2024 = value_audit_df1[value_audit_df1['Competitor__r.Name'] != 'APL']
value_audit_2023 = value_audit_df2[value_audit_df2['Competitor__r.Name'] != 'APL']

value_audit_2024['dealer_code'] = value_audit_2024['Dealer__r.Account_Code__c'].astype(str).str[-6:]
value_audit_2023['dealer_code'] = value_audit_2023['Dealer__r.Account_Code__c'].astype(str).str[-6:]

print("Competitor data shapes:", value_audit_2024.shape, value_audit_2023.shape)

 Load OD (Overdue) data from Excel with multiple sheets
# -------------------------------
# Load OD (Overdue) data from Excel with multiple sheets
# -------------------------------
print("Loading OD data...")
od_monthly_df = pd.DataFrame()

try:
    # Load the Excel file
    excel_file = pd.ExcelFile(od_data_path)
    sheet_names = excel_file.sheet_names
    all_sheets_data = []

    for sheet in sheet_names:
        try:
            # Read each sheet
            temp_df = pd.read_excel(excel_file, sheet_name=sheet)

            # Required columns
            required_cols = ['Posting Date', 'Customer', 'Net Over Due']
            if all(col in temp_df.columns for col in required_cols):
                # Select and rename
                sheet_data = temp_df[required_cols].copy()
                sheet_data.columns = ['posting_date', 'customer', 'overdue_amount']

                # Convert date and extract month
                sheet_data['posting_date'] = pd.to_datetime(sheet_data['posting_date'], errors='coerce')
                sheet_data = sheet_data.dropna(subset=['posting_date'])
                sheet_data['month'] = sheet_data['posting_date'].dt.to_period('M').dt.to_timestamp()

                # Extract last 6 digits of dealer code
                sheet_data['dealer_code'] = sheet_data['customer'].astype(str).str.extract(r'(\d{6})')
                sheet_data = sheet_data.dropna(subset=['dealer_code'])
                sheet_data['dealer_code'] = sheet_data['dealer_code'].astype(str)

                # Keep only needed columns
                all_sheets_data.append(sheet_data[['dealer_code', 'month', 'overdue_amount']])
            else:
                print(f"Sheet {sheet} missing required columns. Skipping.")
        except Exception as e:
            print(f"Error processing sheet {sheet}: {e}")

    # Combine all sheets
    if all_sheets_data:
        od_monthly_df = pd.concat(all_sheets_data, ignore_index=True)
        od_monthly_df = od_monthly_df.sort_values(['dealer_code', 'month'])
        print("OD data shape:", od_monthly_df.shape)
    else:
        print("No valid OD data found in any sheet.")
        od_monthly_df = pd.DataFrame(columns=['dealer_code', 'month', 'overdue_amount'])

except Exception as e:
    print(f"Error loading OD data: {e}")
    print("Proceeding without OD data...")
    od_monthly_df = pd.DataFrame(columns=['dealer_code', 'month', 'overdue_amount'])

