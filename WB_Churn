import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
import os
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# File paths
sales_file = r"C:\Users\P00993489\Downloads\GOmumbai.csv"
value_audit_file1 = r"C:\Users\P00993489\Downloads\Value_Audit.csv"
value_audit_file2 = r"C:\Users\P00993489\Downloads\Value_audit_2.csv"
od_data_path = r"C:\Users\P00993489\Downloads\OD_Data.xlsx"  # Path to OD data Excel workbook

# Define column names
sales_cols = ['Date', 'value', 'volume', 'territory', 'dealer code', 'category']  # Added category
audit_cols = ['Competitor__r.Name', 'Dealer__r.Account_Code__c', 'Dealer__r.Name', 'Value__c', 'Category__c']  # Added category

# Load and preprocess sales data
print("Loading sales data...")
sales_df = pd.read_csv(sales_file, usecols=sales_cols, encoding='latin1')
sales_df["date"] = pd.to_datetime(sales_df["Date"])
sales_df["month"] = sales_df["date"].dt.to_period("M").dt.to_timestamp()
sales_df["year"] = sales_df["date"].dt.year
sales_df["month_num"] = sales_df["date"].dt.month
sales_df['month_ordinal'] = sales_df['month'].map(lambda x: x.toordinal())

# Standardize dealer codes
sales_df['dealer_code'] = sales_df['dealer code'].astype(str).str[-6:]
sales_df = sales_df[~sales_df['dealer_code'].str.startswith('INB', na=False)]

print("Sales data shape:", sales_df.shape)


 Load and preprocess competitor data (Value Audit)
print("Loading competitor data...")
value_audit_df1 = pd.read_csv(value_audit_file1, usecols=audit_cols)
value_audit_df2 = pd.read_csv(value_audit_file2, usecols=audit_cols)

# Filter out 'APL' competitors and standardize dealer codes
value_audit_2024 = value_audit_df1[value_audit_df1['Competitor__r.Name'] != 'APL']
value_audit_2023 = value_audit_df2[value_audit_df2['Competitor__r.Name'] != 'APL']

value_audit_2024['dealer_code'] = value_audit_2024['Dealer__r.Account_Code__c'].astype(str).str[-6:]
value_audit_2023['dealer_code'] = value_audit_2023['Dealer__r.Account_Code__c'].astype(str).str[-6:]

print("Competitor data shapes:", value_audit_2024.shape, value_audit_2023.shape)

 Load OD (Overdue) data from Excel with multiple sheets
# -------------------------------
# Load OD (Overdue) data from Excel with multiple sheets
# -------------------------------
print("Loading OD data...")
od_monthly_df = pd.DataFrame()

try:
    # Load the Excel file
    excel_file = pd.ExcelFile(od_data_path)
    sheet_names = excel_file.sheet_names
    all_sheets_data = []

    for sheet in sheet_names:
        try:
            # Read each sheet
            temp_df = pd.read_excel(excel_file, sheet_name=sheet)

            # Required columns
            required_cols = ['Posting Date', 'Customer', 'Net Over Due']
            if all(col in temp_df.columns for col in required_cols):
                # Select and rename
                sheet_data = temp_df[required_cols].copy()
                sheet_data.columns = ['posting_date', 'customer', 'overdue_amount']

                # Convert date and extract month
                sheet_data['posting_date'] = pd.to_datetime(sheet_data['posting_date'], errors='coerce')
                sheet_data = sheet_data.dropna(subset=['posting_date'])
                sheet_data['month'] = sheet_data['posting_date'].dt.to_period('M').dt.to_timestamp()

                # Extract last 6 digits of dealer code
                sheet_data['dealer_code'] = sheet_data['customer'].astype(str).str.extract(r'(\d{6})')
                sheet_data = sheet_data.dropna(subset=['dealer_code'])
                sheet_data['dealer_code'] = sheet_data['dealer_code'].astype(str)

                # Keep only needed columns
                all_sheets_data.append(sheet_data[['dealer_code', 'month', 'overdue_amount']])
            else:
                print(f"Sheet {sheet} missing required columns. Skipping.")
        except Exception as e:
            print(f"Error processing sheet {sheet}: {e}")

    # Combine all sheets
    if all_sheets_data:
        od_monthly_df = pd.concat(all_sheets_data, ignore_index=True)
        od_monthly_df = od_monthly_df.sort_values(['dealer_code', 'month'])
        print("OD data shape:", od_monthly_df.shape)
    else:
        print("No valid OD data found in any sheet.")
        od_monthly_df = pd.DataFrame(columns=['dealer_code', 'month', 'overdue_amount'])

except Exception as e:
    print(f"Error loading OD data: {e}")
    print("Proceeding without OD data...")
    od_monthly_df = pd.DataFrame(columns=['dealer_code', 'month', 'overdue_amount'])


print("Calculating competitor YoY growth...")

# Group and sum total competitor value per dealer and category
agg_2024 = value_audit_2024.groupby(['dealer_code', 'Category__c'])['Value__c'].sum().reset_index().rename(
    columns={'Value__c': 'comp_value_2024', 'Category__c': 'category'})
agg_2023 = value_audit_2023.groupby(['dealer_code', 'Category__c'])['Value__c'].sum().reset_index().rename(
    columns={'Value__c': 'comp_value_2023', 'Category__c': 'category'})

# Overall dealer totals
dealer_total_2024 = value_audit_2024.groupby('dealer_code')['Value__c'].sum().reset_index().rename(
    columns={'Value__c': 'comp_value_2024'})
dealer_total_2023 = value_audit_2023.groupby('dealer_code')['Value__c'].sum().reset_index().rename(
    columns={'Value__c': 'comp_value_2023'})

# Merge and calculate YoY
category_yoy = pd.merge(agg_2024, agg_2023, on=['dealer_code', 'category'], how='left')
category_yoy = category_yoy.dropna(subset=['comp_value_2023'])
category_yoy['comp_yoy_growth'] = ((category_yoy['comp_value_2024'] - category_yoy['comp_value_2023']) / category_yoy['comp_value_2023'])

dealer_yoy = pd.merge(dealer_total_2024, dealer_total_2023, on='dealer_code', how='left')
dealer_yoy = dealer_yoy.dropna(subset=['comp_value_2023'])
dealer_yoy['comp_yoy_growth'] = ((dealer_yoy['comp_value_2024'] - dealer_yoy['comp_value_2023']) / dealer_yoy['comp_value_2023'])

# Clean up
category_yoy = category_yoy.replace([np.inf, -np.inf], np.nan).dropna(subset=['comp_yoy_growth'])
dealer_yoy = dealer_yoy.replace([np.inf, -np.inf], np.nan).dropna(subset=['comp_yoy_growth'])

print("Competitor YoY growth calculated.")

print("Analyzing sales data trends...")

# Helper functions
def compute_slope(group):
    if len(group) < 2:
        return np.nan
    X = group['month_ordinal'].values.reshape(-1, 1)
    y = group['value'].values
    model = LinearRegression()
    model.fit(X, y)
    return model.coef_[0]

def compute_volume_slope(group):
    if len(group) < 2:
        return np.nan
    X = group['month_ordinal'].values.reshape(-1, 1)
    y = group['volume'].values
    model = LinearRegression()
    model.fit(X, y)
    return model.coef_[0]

# Most recent 3 months
recent_months = sorted(sales_df['month'].unique())[-3:]
sales_3m = sales_df[sales_df['month'].isin(recent_months)]

# Dealer-level trend
dealer_trends = sales_3m.groupby('dealer_code').apply(compute_slope).reset_index(name='sales_slope')
dealer_volume_trends = sales_3m.groupby('dealer_code').apply(compute_volume_slope).reset_index(name='volume_slope')
dealer_trends = pd.merge(dealer_trends, dealer_volume_trends, on='dealer_code', how='left')

# Category-level trend
category_trends = sales_3m.groupby(['dealer_code', 'category']).apply(compute_slope).reset_index(name='sales_slope')
category_volume_trends = sales_3m.groupby(['dealer_code', 'category']).apply(compute_volume_slope).reset_index(name='volume_slope')
category_trends = pd.merge(category_trends, category_volume_trends, on=['dealer_code', 'category'], how='left')

# YoY Sales Growth
current_year = sales_df['year'].max()
prev_year = current_year - 1

dealer_sales_current = sales_df[sales_df['year'] == current_year].groupby('dealer_code')['value'].sum().reset_index(name='current_sales')
dealer_sales_prev = sales_df[sales_df['year'] == prev_year].groupby('dealer_code')['value'].sum().reset_index(name='prev_sales')
dealer_sales_yoy = pd.merge(dealer_sales_current, dealer_sales_prev, on='dealer_code', how='left')
dealer_sales_yoy['sales_yoy_growth'] = ((dealer_sales_yoy['current_sales'] - dealer_sales_yoy['prev_sales']) / dealer_sales_yoy['prev_sales'])
dealer_sales_yoy = dealer_sales_yoy.replace([np.inf, -np.inf], np.nan).dropna(subset=['sales_yoy_growth'])

# Category-level YoY
cat_sales_current = sales_df[sales_df['year'] == current_year].groupby(['dealer_code', 'category'])['value'].sum().reset_index(name='current_sales')
cat_sales_prev = sales_df[sales_df['year'] == prev_year].groupby(['dealer_code', 'category'])['value'].sum().reset_index(name='prev_sales')
cat_sales_yoy = pd.merge(cat_sales_current, cat_sales_prev, on=['dealer_code', 'category'], how='left')
cat_sales_yoy['sales_yoy_growth'] = ((cat_sales_yoy['current_sales'] - cat_sales_yoy['prev_sales']) / cat_sales_yoy['prev_sales'])
cat_sales_yoy = cat_sales_yoy.replace([np.inf, -np.inf], np.nan).dropna(subset=['sales_yoy_growth'])

print("Sales trends calculated.")

print("Calculating division-level growth metrics...")

# ✅ Step 1: Get most recent 3 months
recent_months = sorted(sales_df['month'].unique())[-3:]
sales_3m = sales_df[sales_df['month'].isin(recent_months)]

# ✅ Step 2: Prepare division-level monthly sales totals
def get_division_growth(df):
    monthly_data = []

    for i, month in enumerate(recent_months):
        month_data = df[df['month'] == month].groupby('division')['value'].sum().reset_index()
        month_data['month_index'] = i
        monthly_data.append(month_data)

    division_monthly = pd.concat(monthly_data)

    # ✅ Step 3: Apply linear regression slope per division
    division_growth = {}
    for div in division_monthly['division'].unique():
        div_data = division_monthly[division_monthly['division'] == div]
        if len(div_data) >= 2:
            X = div_data['month_index'].values.reshape(-1, 1)
            y = div_data['value'].values
            model = LinearRegression()
            model.fit(X, y)
            division_growth[div] = model.coef_[0]

    return pd.DataFrame(list(division_growth.items()), columns=['division', 'division_growth'])

# ✅ Step 4: Compute growth
division_growth_df = get_division_growth(sales_df)

# ✅ Step 5: Map each dealer to its division
dealer_division_map = sales_df[['dealer_code', 'division']].drop_duplicates()

# ✅ Step 6: Merge into dealer- and category-level feature data
region_3m_current = pd.merge(region_3m_current, dealer_division_map, on='dealer_code', how='left')
region_3m_current = pd.merge(region_3m_current, division_growth_df, on='division', how='left')

cat_region_3m = pd.merge(cat_region_3m, dealer_division_map, on='dealer_code', how='left')
cat_region_3m = pd.merge(cat_region_3m, division_growth_df, on='division', how='left')

print("Division-based growth metrics calculated.")


