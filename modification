
avg_scores['weight'] = avg_scores['insight_type'].map(business_weights)
avg_scores['weighted_score'] = avg_scores['score'] * avg_scores['weight']

# === STEP 4: Pick top 2 insights per territory ===
top2_insights_per_territory = (
    avg_scores.sort_values(['territory', 'weighted_score'], ascending=[True, False])
    .groupby('territory')
    .head(2)
    .reset_index(drop=True)
)

# === STEP 5: Generate grouped notifications as rows ===
rows = []

for territory in top2_insights_per_territory['territory'].unique():
    selected_insights = top2_insights_per_territory[
        top2_insights_per_territory['territory'] == territory
    ]['insight_type'].tolist()

    for insight in selected_insights:
        if insight == 'Engagement Drop':
            df = engagement_output[engagement_output['territory'] == territory]

            top_category_row = (
                df.groupby('product_category')['score']
                .mean()
                .reset_index()
                .sort_values('score', ascending=False)
            )

            if not top_category_row.empty:
                top_category = top_category_row.iloc[0]['product_category']
                dealers = sorted(
                    df[df['product_category'] == top_category]['dealer_code'].astype(str).unique()
                )
                rows.append({
                    'territory': territory,
                    'insight_type': insight,
                    'notification': f"Dealers {', '.join(dealers)} likely to disengage from {top_category}"
                })
        else:
            df = dealer_insights[
                (dealer_insights['territory'] == territory) &
                (dealer_insights['insight_type'] == insight)
            ][['dealer_code', 'notification']].copy()

            df['issue'] = df['notification'].str.split("due to:").str[-1].str.strip().fillna("")

            grouped = df.groupby('issue')['dealer_code'].apply(
                lambda x: sorted(x.astype(str).unique())
            ).reset_index()

            for _, row in grouped.iterrows():
                issue = row['issue']
                dealers = row['dealer_code']

                if insight == 'Advanced Push Potential':
                    notif = f"Dealers {', '.join(dealers)} are candidates for push based on advanced product momentum."
                else:
                    notif = f"Dealers {', '.join(dealers)} likely to reduce purchase due to: {issue}"

                rows.append({
                    'territory': territory,
                    'insight_type': insight,
                    'notification': notif
                })

# === STEP 6: Create final table with top 2 grouped notifications per territory ===
notification_df = pd.DataFrame(rows)
notification_df['rank'] = notification_df.groupby('territory').cumcount() + 1
final_notification_table = notification_df[notification_df['rank'] <= 2].drop(columns='rank')

# === Display final structured output ===
#import ace_tools as tools
#tools.display_dataframe_to_user(name="Top 2 Grouped Notifications per Territory", dataframe=final_notification_table)

---------------------------------


# === STEP 5: Generate grouped notifications as rows (LIMIT TOP 5 DEALERS per group) ===
rows = []

for territory in top2_insights_per_territory['territory'].unique():
    selected_insights = top2_insights_per_territory[
        top2_insights_per_territory['territory'] == territory
    ]['insight_type'].tolist()

    for insight in selected_insights:
        if insight == 'Engagement Drop':
            df = engagement_output[engagement_output['territory'] == territory]

            top_category_row = (
                df.groupby('product_category')['score']
                .mean()
                .reset_index()
                .sort_values('score', ascending=False)
            )

            if not top_category_row.empty:
                top_category = top_category_row.iloc[0]['product_category']
                dealers = sorted(
                    df[df['product_category'] == top_category]['dealer_code'].astype(str).unique()
                )[:5]  # ðŸ”´ LIMIT TO TOP 5
                rows.append({
                    'territory': territory,
                    'insight_type': insight,
                    'notification': f"Dealers {', '.join(dealers)} likely to disengage from {top_category}"
                })

        else:
            # Determine which risk column to use
            score_col = 'risk_score' if 'risk_score' in dealer_insights.columns else 'churn_risk_score'

            # Extract subset with appropriate columns
            df = dealer_insights[
                (dealer_insights['territory'] == territory) &
                (dealer_insights['insight_type'] == insight)
            ][['dealer_code', 'notification', score_col]].copy()

            # Extract the issue from the notification
            df['issue'] = df['notification'].str.split("due to:").str[-1].str.strip().fillna("")

            # Sort by risk score
            df = df.sort_values(score_col, ascending=False)

            # Group by issue and collect top 5 dealers
            grouped = (
                df.groupby('issue')
                .agg({'dealer_code': lambda x: sorted(x.astype(str).unique()[:5])})
                .reset_index()
            )

            for _, row in grouped.iterrows():
                issue = row['issue']
                dealers = row['dealer_code']

                if insight == 'Advanced Push Potential':
                    notif = f"Dealers {', '.join(dealers)} are candidates for push based on advanced product momentum."
                else:
                    notif = f"Dealers {', '.join(dealers)} likely to reduce purchase due to: {issue}"

                rows.append({
                    'territory': territory,
                    'insight_type': insight,
                    'notification': notif
                })
