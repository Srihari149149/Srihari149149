import pandas as pd

# === Step 1: Read the Excel files ===

# Replace these paths with your actual file paths
sales_file = "path_to_your_sales_file.xlsx"
mapping_file = "path_to_your_mapping_file.xlsx"

# Read files (assumes data starts from first row, change sheet_name if needed)
sales_df = pd.read_excel(sales_file)
mapping_df = pd.read_excel(mapping_file)

# === Step 2: Clean and prepare mapping file ===

# Rename columns for clarity
mapping_df.columns = ['product_code', 'subcategory', 'advance_flag', 'total_flag']

# Convert product code to string (some may be integers)
mapping_df['product_code'] = mapping_df['product_code'].astype(str).str.strip()

# === Step 3: Extract join key from material code in sales data ===

# If product code is first 2 digits of material code
sales_df['product_code'] = sales_df['material code'].astype(str).str[:2]  # or [:4] if required

# === Step 4: Merge sales data with product mapping ===

merged_df = pd.merge(
    sales_df,
    mapping_df[['product_code', 'advance_flag']],
    on='product_code',
    how='left'
)

# === Step 5: Create is_advanced flag ===

merged_df['is_advanced'] = merged_df['advance_flag'].apply(lambda x: 1 if str(x).strip().upper() == 'A' else 0)

# STEP 1: Monthly Aggregation
monthly_agg = merged_df.groupby(['dealer code', 'month']).agg(
    total_sales_value=('sales_value', 'sum'),
    total_volume=('volume', 'sum'),
    advanced_sales_value=('sales_value', lambda x: x[merged_df.loc[x.index, 'is_advanced'] == 1].sum()),
    advanced_volume=('volume', lambda x: x[merged_df.loc[x.index, 'is_advanced'] == 1].sum())
).reset_index()

# STEP 2: Advanced Ratio
monthly_agg['advanced_ratio_value'] = monthly_agg['advanced_sales_value'] / monthly_agg['total_sales_value']

import pandas as pd
from sklearn.linear_model import LinearRegression

# STEP 1: Monthly Aggregation (if not already done)
# Note: Use your actual merged DataFrame name here instead of `merged_df`
monthly_agg = merged_df.groupby(['dealer code', 'month']).agg(
    total_sales_value=('sales_value', 'sum'),
    total_volume=('volume', 'sum'),
    advanced_sales_value=('sales_value', lambda x: x[merged_df.loc[x.index, 'is_advanced'] == 1].sum()),
    advanced_volume=('volume', lambda x: x[merged_df.loc[x.index, 'is_advanced'] == 1].sum())
).reset_index()

monthly_agg['advanced_ratio_value'] = monthly_agg['advanced_sales_value'] / monthly_agg['total_sales_value']

# STEP 2: Sort and assign month_num per dealer
monthly_agg = monthly_agg.sort_values(['dealer code', 'month'])
monthly_agg['month_num'] = monthly_agg.groupby('dealer code').cumcount() + 1

# STEP 3: Filter last 6 months per dealer
monthly_6m = monthly_agg.groupby('dealer code').tail(6).copy()

# STEP 4: Define slope function
def compute_slope(x, y):
    if x.isna().any() or y.isna().any() or len(x) < 2:
        return None
    x = x.values.reshape(-1, 1)
    y = y.values
    model = LinearRegression()
    model.fit(x, y)
    return model.coef_[0]

# STEP 5: Compute slopes and target
final_trends = []

for dealer, group in monthly_6m.groupby('dealer code'):
    group = group.sort_values('month')
    adv_slope = compute_slope(group['month_num'], group['advanced_ratio_value'])
    value_slope = compute_slope(group['month_num'], group['total_sales_value'])
    volume_slope = compute_slope(group['month_num'], group['total_volume'])
    
    target = int(
        (adv_slope is not None and adv_slope >= 0.05) and 
        ((value_slope is not None and value_slope > 0) or (volume_slope is not None and volume_slope > 0))
    )
    
    final_trends.append({
        'dealer code': dealer,
        'adv_ratio_slope': adv_slope,
        'value_slope': value_slope,
        'volume_slope': volume_slope,
        'target_push_potential': target
    })

# STEP 6: Final Output
push_df = pd.DataFrame(final_trends)
display(push_df)

# Generate notifications for dealers with push potential = 1
notification_df = push_df.copy()

# Ensure target column exists
if 'target_push_potential' in notification_df.columns:
    notification_df = notification_df[notification_df['target_push_potential'] == 1].copy()

    notification_df['notification'] = notification_df.apply(
        lambda row: f"üöÄ Dealer {row['dealer code']} has shown a consistent rise in premium product adoption and overall performance. Recommend promoting advanced SKUs in upcoming visits.",
        axis=1
    )

    display(notification_df[['dealer code', 'notification']])
else:
    print("‚ùå 'target_push_potential' column not found. Please rerun the push potential logic.")

# ‚¨áÔ∏è Place this AFTER your existing push potential logic

# STEP 1: Sort and assign month numbers
monthly_agg = monthly_agg.sort_values(['dealer code', 'month'])
monthly_agg['month_num'] = monthly_agg.groupby('dealer code').cumcount() + 1

# STEP 2: Take last 6 months per dealer
monthly_6m = monthly_agg.groupby('dealer code').tail(6).copy()

# STEP 3: Slope function
def compute_slope(x, y):
    if x.isna().any() or y.isna().any() or len(x) < 2:
        return None
    x = x.values.reshape(-1, 1)
    y = y.values
    model = LinearRegression()
    model.fit(x, y)
    return model.coef_[0]

# STEP 4: Logic to detect drop in advanced ratio despite stable volume
decline_insights = []

for dealer, group in monthly_6m.groupby('dealer code'):
    group = group.sort_values('month')
    if len(group) < 6:
        continue

    first_half = group.iloc[:3]   # months 6‚Üí4
    second_half = group.iloc[3:]  # months 3‚Üí1

    adv_early_slope = compute_slope(first_half['month_num'], first_half['advanced_ratio_value'])
    adv_late_slope = compute_slope(second_half['month_num'], second_half['advanced_ratio_value'])
    volume_late_slope = compute_slope(second_half['month_num'], second_half['total_volume'])

    if (
        adv_early_slope is not None and adv_early_slope >= 0 and
        adv_late_slope is not None and adv_late_slope < 0 and
        volume_late_slope is not None and volume_late_slope >= 0
    ):
        decline_insights.append({
            'dealer code': dealer,
            'adv_ratio_early_slope': adv_early_slope,
            'adv_ratio_late_slope': adv_late_slope,
            'volume_slope_last3': volume_late_slope,
            'notification': f"‚ö†Ô∏è Dealer {dealer} previously showed interest in premium SKUs, but recent data indicates a dip in advanced product focus despite healthy volume. Re-engagement recommended."
        })

# STEP 5: Display final insight output
decline_df = pd.DataFrame(decline_insights)
display(decline_df)
