import pandas as pd

# === Step 1: Read the Excel files ===

# Replace these paths with your actual file paths
sales_file = "path_to_your_sales_file.xlsx"
mapping_file = "path_to_your_mapping_file.xlsx"

# Read files (assumes data starts from first row, change sheet_name if needed)
sales_df = pd.read_excel(sales_file)
mapping_df = pd.read_excel(mapping_file)

# === Step 2: Clean and prepare mapping file ===

# Rename columns for clarity
mapping_df.columns = ['product_code', 'subcategory', 'advance_flag', 'total_flag']

# Convert product code to string (some may be integers)
mapping_df['product_code'] = mapping_df['product_code'].astype(str).str.strip()

# === Step 3: Extract join key from material code in sales data ===

# If product code is first 2 digits of material code
sales_df['product_code'] = sales_df['material code'].astype(str).str[:2]  # or [:4] if required

# === Step 4: Merge sales data with product mapping ===

merged_df = pd.merge(
    sales_df,
    mapping_df[['product_code', 'advance_flag']],
    on='product_code',
    how='left'
)

# === Step 5: Create is_advanced flag ===

merged_df['is_advanced'] = merged_df['advance_flag'].apply(lambda x: 1 if str(x).strip().upper() == 'A' else 0)

# STEP 1: Monthly Aggregation
monthly_agg = merged_df.groupby(['dealer code', 'month']).agg(
    total_sales_value=('sales_value', 'sum'),
    total_volume=('volume', 'sum'),
    advanced_sales_value=('sales_value', lambda x: x[merged_df.loc[x.index, 'is_advanced'] == 1].sum()),
    advanced_volume=('volume', lambda x: x[merged_df.loc[x.index, 'is_advanced'] == 1].sum())
).reset_index()

# STEP 2: Advanced Ratio
monthly_agg['advanced_ratio_value'] = monthly_agg['advanced_sales_value'] / monthly_agg['total_sales_value']

import pandas as pd
from sklearn.linear_model import LinearRegression

# STEP 1: Sort and add month number per dealer
monthly_agg = monthly_agg.sort_values(['dealer code', 'month'])
monthly_agg['month_num'] = monthly_agg.groupby('dealer code').cumcount() + 1

# STEP 2: Take last 6 months per dealer
monthly_6m = monthly_agg.groupby('dealer code').tail(6).copy()

# STEP 3: Define slope and growth functions
def compute_adv_ratio_slope(df):
    x = df['month_num'].values.reshape(-1, 1)
    y = df['advanced_ratio_value'].values
    if len(x) < 2 or pd.isna(y).sum() > 1:
        return None
    model = LinearRegression()
    model.fit(x, y)
    return model.coef_[0]

def compute_growth(start, end):
    if start == 0 or pd.isna(start) or pd.isna(end):
        return None
    return (end - start) / start

# STEP 4: Calculate metrics for each dealer
final_trends = []

for dealer, group in monthly_6m.groupby('dealer code'):
    group = group.sort_values('month')
    adv_slope = compute_adv_ratio_slope(group)
    value_growth = compute_growth(group['total_sales_value'].iloc[0], group['total_sales_value'].iloc[-1])
    volume_growth = compute_growth(group['total_volume'].iloc[0], group['total_volume'].iloc[-1])
    
    # Push potential logic
    target = int(
        (adv_slope is not None and adv_slope >= 0.05) and 
        ((value_growth is not None and value_growth > 0) or (volume_growth is not None and volume_growth > 0))
    )
    
    final_trends.append({
        'dealer code': dealer,
        'adv_ratio_slope': adv_slope,
        'value_growth_pct': value_growth,
        'volume_growth_pct': volume_growth,
        'target_push_potential': target
    })

# STEP 5: Final output as DataFrame
push_df = pd.DataFrame(final_trends)
display(push_df)


