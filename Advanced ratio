import pandas as pd

# === Step 1: Read the Excel files ===

# Replace these paths with your actual file paths
sales_file = "path_to_your_sales_file.xlsx"
mapping_file = "path_to_your_mapping_file.xlsx"

# Read files (assumes data starts from first row, change sheet_name if needed)
sales_df = pd.read_excel(sales_file)
mapping_df = pd.read_excel(mapping_file)

# === Step 2: Clean and prepare mapping file ===

# Rename columns for clarity
mapping_df.columns = ['product_code', 'subcategory', 'advance_flag', 'total_flag']

# Convert product code to string (some may be integers)
mapping_df['product_code'] = mapping_df['product_code'].astype(str).str.strip()

# === Step 3: Extract join key from material code in sales data ===

# If product code is first 2 digits of material code
sales_df['product_code'] = sales_df['material code'].astype(str).str[:2]  # or [:4] if required

# === Step 4: Merge sales data with product mapping ===

merged_df = pd.merge(
    sales_df,
    mapping_df[['product_code', 'advance_flag']],
    on='product_code',
    how='left'
)

# === Step 5: Create is_advanced flag ===

merged_df['is_advanced'] = merged_df['advance_flag'].apply(lambda x: 1 if str(x).strip().upper() == 'A' else 0)

# STEP 1: Monthly Aggregation
monthly_agg = merged_df.groupby(['dealer code', 'month']).agg(
    total_sales_value=('sales_value', 'sum'),
    total_volume=('volume', 'sum'),
    advanced_sales_value=('sales_value', lambda x: x[merged_df.loc[x.index, 'is_advanced'] == 1].sum()),
    advanced_volume=('volume', lambda x: x[merged_df.loc[x.index, 'is_advanced'] == 1].sum())
).reset_index()

# STEP 2: Advanced Ratio
monthly_agg['advanced_ratio_value'] = monthly_agg['advanced_sales_value'] / monthly_agg['total_sales_value']


from sklearn.linear_model import LinearRegression

# Step 3: Sort and assign month number
monthly_agg = monthly_agg.sort_values(['dealer code', 'month'])
monthly_agg['month_num'] = monthly_agg.groupby('dealer code').cumcount() + 1

# Step 4: Define slope function
def compute_slope(x, y):
    if x.isna().any() or y.isna().any() or len(x) < 2:
        return None
    x = x.values.reshape(-1, 1)
    y = y.values
    model = LinearRegression()
    model.fit(x, y)
    return model.coef_[0]

# Step 5: Compute slopes for ratio, value, and volume
trend_df = monthly_agg.groupby('dealer code').apply(
    lambda g: pd.Series({
        'adv_ratio_slope': compute_slope(g['month_num'], g['advanced_ratio_value']),
        'value_slope': compute_slope(g['month_num'], g['total_sales_value']),
        'volume_slope': compute_slope(g['month_num'], g['total_volume']),
    })
).reset_index()

# Step 6: Merge slope results back into monthly_agg
monthly_agg = pd.merge(monthly_agg, trend_df, on='dealer code', how='left')

# Step 7: Define refined push potential logic
monthly_agg['target_push_potential'] = (
    (monthly_agg['adv_ratio_slope'] >= 0.05) & 
    ((monthly_agg['value_slope'] > 0) | (monthly_agg['volume_slope'] > 0))
).astype(int)

# -------------------------------------------------------------------
# âœ… Now you can use monthly_agg['target_push_potential'] as your label
