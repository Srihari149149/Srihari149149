import pandas as pd

# === Step 1: Read the Excel files ===

# Replace these paths with your actual file paths
sales_file = "path_to_your_sales_file.xlsx"
mapping_file = "path_to_your_mapping_file.xlsx"

# Read files (assumes data starts from first row, change sheet_name if needed)
sales_df = pd.read_excel(sales_file)
mapping_df = pd.read_excel(mapping_file)

# === Step 2: Clean and prepare mapping file ===

# Rename columns for clarity
mapping_df.columns = ['product_code', 'subcategory', 'advance_flag', 'total_flag']

# Convert product code to string (some may be integers)
mapping_df['product_code'] = mapping_df['product_code'].astype(str).str.strip()

# === Step 3: Extract join key from material code in sales data ===

# If product code is first 2 digits of material code
sales_df['product_code'] = sales_df['material code'].astype(str).str[:2]  # or [:4] if required

# === Step 4: Merge sales data with product mapping ===

merged_df = pd.merge(
    sales_df,
    mapping_df[['product_code', 'advance_flag']],
    on='product_code',
    how='left'
)

# === Step 5: Create is_advanced flag ===

merged_df['is_advanced'] = merged_df['advance_flag'].apply(lambda x: 1 if str(x).strip().upper() == 'A' else 0)

# === Step 6: Preview the merged data ===

merged_df[['material code', 'product_code', 'dealer code', 'sales_value', 'volume', 'month', 'is_advanced']].head()

monthly_agg = merged_df.groupby(['dealer code', 'month']).agg(
    total_sales_value=('sales_value', 'sum'),
    total_volume=('volume', 'sum'),
    advanced_sales_value=('sales_value', lambda x: x[merged_df.loc[x.index, 'is_advanced'] == 1].sum()),
    advanced_volume=('volume', lambda x: x[merged_df.loc[x.index, 'is_advanced'] == 1].sum())
).reset_index()

print("Monthly Aggregated Shape (before lags):", monthly_agg.shape)
print("Monthly Aggregated Sample:")
print(monthly_agg.head())
# Step 1: Sort the data properly for time-based operations
monthly_agg = monthly_agg.sort_values(['dealer code', 'month'])

# Step 2: Create lag features (previous month values)
monthly_agg['advanced_ratio_value'] = monthly_agg['advanced_sales_value'] / monthly_agg['total_sales_value']
monthly_agg['advanced_ratio_value_lag'] = monthly_agg.groupby('dealer code')['advanced_ratio_value'].shift(1)
monthly_agg['advanced_sales_value_lag'] = monthly_agg.groupby('dealer code')['advanced_sales_value'].shift(1)
monthly_agg['advanced_volume_lag'] = monthly_agg.groupby('dealer code')['advanced_volume'].shift(1)
monthly_agg['total_sales_value_lag'] = monthly_agg.groupby('dealer code')['total_sales_value'].shift(1)
monthly_agg['total_volume_lag'] = monthly_agg.groupby('dealer code')['total_volume'].shift(1)

# Step 3: Calculate growth and change metrics
monthly_agg['advanced_value_growth'] = (monthly_agg['advanced_sales_value'] - monthly_agg['advanced_sales_value_lag']) / monthly_agg['advanced_sales_value_lag']
monthly_agg['advanced_volume_growth'] = (monthly_agg['advanced_volume'] - monthly_agg['advanced_volume_lag']) / monthly_agg['advanced_volume_lag']
monthly_agg['total_value_growth'] = (monthly_agg['total_sales_value'] - monthly_agg['total_sales_value_lag']) / monthly_agg['total_sales_value_lag']
monthly_agg['total_volume_growth'] = (monthly_agg['total_volume'] - monthly_agg['total_volume_lag']) / monthly_agg['total_volume_lag']
monthly_agg['adv_ratio_value_change'] = monthly_agg['advanced_ratio_value'] - monthly_agg['advanced_ratio_value_lag']

# Step 4: Define future-based columns for creating the label
monthly_agg['future_ratio_value'] = monthly_agg.groupby('dealer code')['advanced_ratio_value'].shift(-1)
monthly_agg['future_advanced_volume'] = monthly_agg.groupby('dealer code')['advanced_volume'].shift(-1)

# Step 5: Create the label — 1 if next month ratio ↑ > 20% AND advanced volume ↑
monthly_agg['target_push_potential'] = (
    (monthly_agg['future_ratio_value'] - monthly_agg['advanced_ratio_value']) > 0.20
) & (
    monthly_agg['future_advanced_volume'] > monthly_agg['advanced_volume']
)
monthly_agg['target_push_potential'] = monthly_agg['target_push_potential'].astype(int)

# Step 6: Drop rows with essential NaNs for modeling
model_data = monthly_agg.dropna(subset=[
    'advanced_ratio_value_lag',
    'target_push_potential'
])

