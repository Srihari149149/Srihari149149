# STEP 3: Drop NA rows
ml_data = df.dropna(subset=[
    'value_lag1', 'volume_lag1',
    'value_pct_change', 'volume_pct_change',
])

# STEP 4: Split into train (months 1-3) and predict (month 4)
month_list = sorted(ml_data['month'].unique())
print(month_list)
if len(month_list) >=22:
    train_months = month_list[:21]
    print(train_months)
    predict_month = month_list[21]
    print(predict_month)
    train_data = ml_data[ml_data['month'].isin([train_months])].copy()
    display(train_data)
    predict_data = ml_data[ml_data['month'] == predict_month].copy()
    # Check for multiple classes in target
    if train_data['engagement_drop'].nunique() < 2:
        print(" Training data only has one class. Try adjusting drop threshold or check data size.")
        print(train_data['engagement_drop'].value_counts())
        print(train_data['engagement_drop'].value_counts())
    else:
        # STEP 5: Train model
        features = [
            'value_lag1', 'volume_lag1',
            'value_pct_change', 'volume_pct_change'
        ]

        X_train = train_data[features]
        y_train = train_data['engagement_drop']

        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)

        model = LogisticRegression()
        model.fit(X_train_scaled, y_train)
