import pandas as pd

# Read both value audit files
cols = ['Competitor_r_Name', 'Dealer_r_Account_Code__c', 'Value__c']

value_audit_2024 = pd.read_csv("path_to_value_audit_2024.csv", usecols=cols)
value_audit_2023 = pd.read_csv("path_to_value_audit_2023.csv", usecols=cols)

# Step 1: Filter out 'APL' competitors
value_audit_2024 = value_audit_2024[value_audit_2024['Competitor_r_Name'] != 'APL']
value_audit_2023 = value_audit_2023[value_audit_2023['Competitor_r_Name'] != 'APL']

# Step 2: Keep only last 6 digits of dealer codes
value_audit_2024['dealer_code'] = value_audit_2024['Dealer_r_Account_Code__c'].astype(str).str[-6:]
value_audit_2023['dealer_code'] = value_audit_2023['Dealer_r_Account_Code__c'].astype(str).str[-6:]

# Step 3: Group and sum total competitor value per dealer
agg_2024 = value_audit_2024.groupby('dealer_code')['Value__c'].sum().reset_index().rename(columns={'Value__c': 'comp_value_2024'})
agg_2023 = value_audit_2023.groupby('dealer_code')['Value__c'].sum().reset_index().rename(columns={'Value__c': 'comp_value_2023'})

# Step 4: Merge both year datasets
dealer_yoy = pd.merge(agg_2024, agg_2023, on='dealer_code', how='left')

# Step 5: Drop rows where 2023 value is missing (no meaningful growth to compare)
dealer_yoy = dealer_yoy.dropna(subset=['comp_value_2023'])

# Step 6: Compute YoY growth %
dealer_yoy['comp_yoy_growth'] = ((dealer_yoy['comp_value_2024'] - dealer_yoy['comp_value_2023']) / dealer_yoy['comp_value_2023']) * 100

# View sample output
display(dealer_yoy.head())

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# --------------------
# Step 1: Load your monthly AP sales data
# Columns: dealer_code, month (datetime), sales_value
# --------------------

# Example: replace this with your actual DataFrame
# sales_data = pd.read_csv("path_to_sales_data.csv", parse_dates=['month'])

# Sort and prepare
sales_data = sales_data.sort_values(['dealer_code', 'month'])
sales_data['month_ordinal'] = sales_data['month'].map(lambda x: x.toordinal())

# --------------------
# Step 2: Compute slope of AP sales value over the last 3 months for each dealer
# --------------------

def compute_slope(group):
    if len(group) < 2:
        return np.nan
    X = group['month_ordinal'].values.reshape(-1, 1)
    y = group['sales_value'].values
    model = LinearRegression()
    model.fit(X, y)
    return model.coef_[0]  # slope

sales_trend = (
    sales_data.groupby('dealer_code')
    .apply(compute_slope)
    .reset_index(name='sales_slope')
)

# --------------------
# Step 3: Load your competitor growth data (already created earlier)
# Columns: dealer_code, comp_value_2023, comp_value_2024, comp_yoy_growth
# --------------------

# Example: dealer_yoy = pd.read_csv("dealer_yoy_output.csv")
# (Make sure the column is named: 'competitor_growth' for % growth)

# Rename if needed
# dealer_yoy.rename(columns={'comp_yoy_growth': 'competitor_growth'}, inplace=True)

# --------------------
# Step 4: Merge the two datasets on dealer_code
# --------------------

churn_df = pd.merge(sales_trend, dealer_yoy[['dealer_code', 'competitor_growth']], on='dealer_code', how='inner')

# --------------------
# Step 5: Flag churn risk where competitor_growth > 10% and AP sales are falling
# --------------------

churn_df['churn_risk'] = ((churn_df['competitor_growth'] > 0.10) & (churn_df['sales_slope'] < 0)).astype(int)

# --------------------
# Step 6: Generate notification text
# --------------------

churn_df['notification'] = churn_df.apply(
    lambda x: f"⚠️ Dealer {x['dealer_code']} is showing rising competitor sales and declining AP sales — risk of churn." 
    if x['churn_risk'] == 1 else "", axis=1
)

# --------------------
# Step 7: View / Save Results
# --------------------

display(churn_df[['dealer_code', 'competitor_growth', 'sales_slope', 'churn_risk', 'notification']])

# Optional: Export
# churn_df.to_csv("churn_prediction_output.csv", index=False)

